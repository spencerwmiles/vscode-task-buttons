name: Create RC Pre-release

on:
  push:
    branches:
      - main # Trigger on pushes to main branch for RC pre-releases

permissions:
  contents: write # Allow creating releases, commits, tags
  issues: write # Allow commenting on issues/PRs (optional, for semantic-release plugins)
  pull-requests: write # Allow commenting on issues/PRs (optional)
  id-token: write # Needed for OIDC if used for publishing

jobs:
  release:
    name: Prepare and Publish RC Pre-release
    runs-on: ubuntu-latest
    # Prevent workflow run on the commit made by semantic-release
    if: ${{ !contains(github.event.head_commit.message, 'chore(release):') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release commit analysis
          # Ensure we check out the version committed by semantic-release if it ran
          ref: main
          persist-credentials: false # Allow semantic-release to use GITHUB_TOKEN for push

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: true

      - name: Lint
        run: pnpm lint

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test

      # Run semantic-release: Updates package.json/changelog, commits, creates tag/release
      - name: Semantic Release (Create RC Pre-release)
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm semantic-release

      # Get the full pre-release version (e.g., 1.2.3-rc.1) from the updated package.json
      - name: Get Full Pre-release Version
        id: get_full_version
        # Check if semantic-release actually created a new release/tag
        # If it did, package.json was updated and committed. Checkout again to get it.
        # If not (no relevant commits), semantic.outputs.new_release_published will be false/empty
        # Note: semantic-release action doesn't easily output the version. Reading package.json is reliable.
        # We need to checkout again *if* semantic-release made changes.
        if: steps.semantic.outputs.new_release_published == 'true' # Adjust based on actual semantic-release output if available
        uses: actions/checkout@v4
        with:
          ref: main # Checkout the commit semantic-release just made
          persist-credentials: false
      - name: Read Full Version from package.json
        id: read_full_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      # Calculate the base version (e.g., 1.2.3) by stripping the suffix
      - name: Calculate Base Version
        id: get_base_version
        run: |
          full_version="${{ steps.read_full_version.outputs.version }}"
          base_version="${full_version%%-*}" # Remove shortest suffix starting with '-'
          echo "base_version=$base_version" >> $GITHUB_OUTPUT
          echo "Calculated base version: $base_version from $full_version"

      # Update package.json in the runner FS to the base version for packaging/publishing
      # Use --no-git-tag-version to prevent git operations
      - name: Set package.json to Base Version (for Marketplace)
        run: pnpm version ${{ steps.get_base_version.outputs.base_version }} --no-git-tag-version
        # Verify the change (optional)
      - name: Verify package.json version
        run: node -p "require('./package.json').version"

      # Package the extension using the base version in package.json
      - name: Package Extension
        run: pnpm package

      # Upload the VSIX asset to the GitHub release created by semantic-release
      # Use the FULL version for the tag name, as that's what semantic-release created
      - name: Upload VSIX to GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.read_full_version.outputs.version }} # Use the actual tag created
          files: |
            *.vsix
          fail_on_unmatched_files: true
          prerelease: true # Ensure it targets the pre-release

      # Publish to marketplace last, using the base version but marking as pre-release
      - name: Publish RC Pre-release to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v1
        with:
          pat: ${{ secrets.VSCE_PAT }}
          registryUrl: https://marketplace.visualstudio.com
          preRelease: true # Mark this as a pre-release on the marketplace
