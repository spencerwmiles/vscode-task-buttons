name: Create Pre-release

on:
  push:
    branches:
      - production # Trigger on pushes to production branch for pre-releases

permissions:
  contents: write # Allow creating releases, commits, tags
  issues: write # Allow commenting on issues/PRs (optional, for semantic-release plugins)
  pull-requests: write # Allow commenting on issues/PRs (optional)
  id-token: write # Needed for OIDC if used for publishing (though PAT seems used here)

jobs:
  release:
    name: Prepare and Publish Pre-release
    runs-on: ubuntu-latest
    # Prevent workflow run on the commit made by semantic-release
    if: ${{ !contains(github.event.head_commit.message, 'chore(release):') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release commit analysis
          persist-credentials: false # Allow semantic-release to use GITHUB_TOKEN for push

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8 # Match previous version
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm lint

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test

      - name: Semantic Release (Create Pre-release)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm semantic-release # Creates pre-release tag & GitHub pre-release

      - name: Get Pre-release Version
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create Pull Request for Version Update
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Ensure this token has permissions to create branches/PRs
          commit-message: |
            chore(release): Update package.json and CHANGELOG.md for pre-release ${{ steps.get_version.outputs.version }}
          title: |
            chore(release): Updates for pre-release ${{ steps.get_version.outputs.version }}
          body: |
            Automated updates for pre-release version ${{ steps.get_version.outputs.version }}.

            Includes:
            - Version bump in `package.json`
            - Updated `CHANGELOG.md`

            This PR is automatically generated by the pre-release workflow.
          branch: chore/pre-release-updates-${{ steps.get_version.outputs.version }} # Creates a unique branch
          base: production # Target branch for the PR
          delete-branch: true # Clean up the branch after merging
          add-paths: | # Explicitly add only these files
            package.json
            CHANGELOG.md

      - name: Package Extension
        run: pnpm package # Uses the pre-release version in package.json

      - name: Publish Pre-release to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v1
        with:
          pat: ${{ secrets.VSCE_PAT }}
          registryUrl: https://marketplace.visualstudio.com
          preRelease: true # Mark this as a pre-release on the marketplace
