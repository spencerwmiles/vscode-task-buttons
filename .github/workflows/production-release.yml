name: Create Full Release

on:
  push:
    branches:
      - production # Trigger on pushes to production branch for full releases

permissions:
  contents: write # Allow creating releases, commits, tags
  issues: write # Allow commenting on issues/PRs (optional, for semantic-release plugins)
  pull-requests: write # Allow commenting on issues/PRs (optional)
  id-token: write # Needed for OIDC if used for publishing

jobs:
  release:
    name: Prepare and Publish Full Release
    runs-on: ubuntu-latest
    # Prevent workflow run on the commit made by semantic-release
    if: ${{ !contains(github.event.head_commit.message, 'chore(release):') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release commit analysis
          persist-credentials: false # Allow semantic-release to use GITHUB_TOKEN for push

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: true

      - name: Lint
        run: pnpm lint

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test

      # Run semantic-release only after checks pass
      # This will:
      # - Analyze commits since last release on 'production'
      # - Determine next full version (e.g., 1.3.0)
      # - Update package.json and CHANGELOG.md
      # - Commit and push changes back to 'production' (due to @semantic-release/git)
      # - Create GitHub release and tag
      - name: Semantic Release (Create Full Release)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm semantic-release

      - name: Get Full Release Version
        id: get_version
        # Read version directly from the potentially updated package.json
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      # Package the extension using the version determined by semantic-release
      - name: Package Extension
        run: pnpm package

      # Upload the VSIX asset to the GitHub release created by semantic-release
      - name: Upload VSIX to GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }} # Assumes tag is v<version>
          files: |
            *.vsix
          fail_on_unmatched_files: true
          prerelease: false # Ensure it targets the full release

      # Publish to marketplace last
      - name: Publish Full Release to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v1
        with:
          pat: ${{ secrets.VSCE_PAT }}
          registryUrl: https://marketplace.visualstudio.com
          preRelease: false # Mark this as a full release on the marketplace
