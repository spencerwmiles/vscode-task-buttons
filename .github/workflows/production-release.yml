name: Create Full Release

on:
  push:
    branches:
      - production # Trigger on pushes to production branch for full releases

permissions:
  contents: write # Needed for create-pull-request to push branch, semantic-release to create tags/releases
  issues: write # Optional for semantic-release plugins
  pull-requests: write # Needed for create-pull-request
  id-token: write # Needed for OIDC if used for publishing

jobs:
  release:
    name: Prepare and Publish Full Release
    runs-on: ubuntu-latest
    # Prevent workflow run on PRs created by this workflow or commits made by semantic-release (tagging)
    if: |
      !contains(github.event.head_commit.message, 'chore(release):') &&
      github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release commit analysis
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: true

      - name: Lint
        run: pnpm lint

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test

      # Run semantic-release: Updates package.json/changelog locally, creates tag & GitHub release notes
      - name: Semantic Release (Prep Full Release)
        id: semantic
        env:
          # Use default token for creating tags/releases, as it has contents: write
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm semantic-release

      # Read the full release version (e.g., 1.3.0) from the locally modified package.json
      - name: Read Full Version from package.json
        id: read_full_version
        # Only proceed if semantic-release indicates a release was prepared
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      # Create a Pull Request with the version bump changes
      - name: Create Pull Request for Full Release Version Bump
        uses: peter-evans/create-pull-request@v6
        # Only run if a version was determined
        if: steps.read_full_version.outputs.version != ''
        with:
          # Use default token, granted pull-requests: write permission
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(release): Update package.json and CHANGELOG.md for release ${{ steps.read_full_version.outputs.version }}

            [skip ci]
          title: |
            chore(release): Updates for release ${{ steps.read_full_version.outputs.version }}
          body: |
            Automated updates for release version ${{ steps.read_full_version.outputs.version }}.

            Includes:
            - Version bump in `package.json`
            - Updated `CHANGELOG.md`

            This PR is automatically generated by the production release workflow. Please review and merge.
          branch: chore/release-${{ steps.read_full_version.outputs.version }} # Unique branch per version
          base: production # Target branch for the PR
          delete-branch: true # Clean up the branch after merging
          add-paths: | # Explicitly add only these files from the workspace
            package.json
            CHANGELOG.md

      # === Steps for Packaging and Publication ===

      # Package the extension using the version determined by semantic-release
      - name: Package Extension
        if: steps.read_full_version.outputs.version != ''
        run: pnpm package

      # Upload the VSIX asset to the GitHub release created by semantic-release
      - name: Upload VSIX to GitHub Release
        if: steps.read_full_version.outputs.version != ''
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.read_full_version.outputs.version }} # Use the actual tag created by semantic-release
          files: |
            *.vsix
          fail_on_unmatched_files: true
          prerelease: false # Ensure it targets the full release

      # Publish to marketplace last
      - name: Publish Full Release to Visual Studio Marketplace
        if: steps.read_full_version.outputs.version != ''
        uses: HaaLeo/publish-vscode-extension@v1
        with:
          pat: ${{ secrets.VSCE_PAT }}
          registryUrl: https://marketplace.visualstudio.com
          preRelease: false # Mark this as a full release on the marketplace
